package backend.sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.LinkedList;
import frontend.graficas.GraficaCirculo;
import frontend.graficas.GraficaLinea;
import frontend.graficas.GraficaCuadrado;
import frontend.graficas.GraficaRectangulo;
import frontend.graficas.GraficaPoligono;
import backend.figuras.*;
import backend.lexico.Lexer;
import backend.reportes.ErrorReporte;
import javax.swing.JFrame;
import frontend.graficas.PanelDibujo;
import backend.figuras.Figura;
import frontend.graficas.PanelDibujo;

class Parser;

action code {:

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
             Symbol s = (Symbol) info;
             Lexer.errores.add(new ErrorReporte(String.valueOf(s.value), (s.left+1), (s.right+1), "Sintáctico", message));
             System.out.println("Error sintáctico en la Línea " + (s.left + 1) + " Columna " + (s.right + 1) + ". Se encontró: \"" + s.value + "\". " + message);
        } else {
             System.out.println("Error sintáctico: " + message);
        }
    }

    public void report_fatal_error(String message, Object info) throws Exception {
         report_error(message, info);
         throw new Exception("Error sintáctico irrecuperable.");
    }

    public List<Figura> listaObjetosList = new LinkedList<>();

    public List<Figura> getListaObjetosList() {
            return listaObjetosList;
    }

    public void graficar() {
        JFrame ventana = new JFrame("Figuras generadas");
        PanelDibujo panelDibujo = new PanelDibujo();
        GraficaCirculo graficaCirculo = new GraficaCirculo();
        GraficaCuadrado graficaCuadrado = new GraficaCuadrado();
        GraficaLinea graficaLinea = new GraficaLinea();
        GraficaPoligono graficaPoligono = new GraficaPoligono();

        if (!listaObjetosList.isEmpty()){
            for (Object obj : listaObjetosList) {
                if (obj instanceof Circulo) {
                    Circulo circulo = (Circulo) obj;
                    graficaCirculo.setPosicionX(circulo.getPosicionX());
                    graficaCirculo.setPosicionY(circulo.getPosicionY());
                    graficaCirculo.setRadio(circulo.getRadio());
                    graficaCirculo.setColor(circulo.getColor());
                    ventana.add(graficaCirculo);
                } else if (obj instanceof Linea) {
                    Linea linea = (Linea) obj;
                    graficaLinea.setInicialX(linea.getPosicionInicialX());
                    graficaLinea.setInicialY(linea.getPosicionInicialY());
                    graficaLinea.setFinalX(linea.getPosicionFinalX());
                    graficaLinea.setFinalY(linea.getPosicionFinalY());
                    graficaLinea.setColor(linea.getColor());
                    panelDibujo.add(graficaLinea);
                } else if (obj instanceof Cuadrado) {
                    Cuadrado cuadrado = (Cuadrado) obj;
                    graficaCuadrado.setInicialX(cuadrado.getPosicionX());
                    graficaCuadrado.setInicialY(cuadrado.getPosicionY());
                    graficaCuadrado.setTamanio(cuadrado.getTamanio());
                    graficaCuadrado.setColor(cuadrado.getColor());
                    panelDibujo.add(graficaCuadrado);
                } else if (obj instanceof Rectangulo) {
                    Rectangulo rectangulo = (Rectangulo) obj;
                    GraficaRectangulo graficaRectangulo = new GraficaRectangulo(rectangulo.getPosicionX(), rectangulo.getPosicionY(), rectangulo.getAncho(), rectangulo.getAlto(), rectangulo.getColor());
                    panelDibujo.add(graficaRectangulo);
                } else if (obj instanceof Poligono) {
                    Poligono poligono = (Poligono) obj;
                    graficaPoligono.setPosicionX(poligono.getPosicionX());
                    graficaPoligono.setPosicionY(poligono.getPosicionY());
                    graficaPoligono.setCantLados(poligono.getCantidadLados());
                    graficaPoligono.setAncho(poligono.getAncho());
                    graficaPoligono.setAlto(poligono.getAlto());
                    graficaPoligono.setColor(poligono.getColor());
                    panelDibujo.add(graficaPoligono);
                }
            }

            ventana.add(graficaCuadrado);
            ventana.add(graficaLinea);
            ventana.add(graficaPoligono);
            ventana.add(graficaCirculo);
            ventana.repaint();
            ventana.setSize(800, 600);
            ventana.setLocationRelativeTo(null);
            ventana.setVisible(true);
            panelDibujo.repaint();
            ventana.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        }
    }


:}

terminal PARENTESIS_ABRE, PARENTESIS_CIERRA, COMA, AZUL, ROJO, AMARILLO, VERDE,
NEGRO, CELESTE, ROSADO, MORADO, LINEA, CURVA, GRAFICAR, CIRCULO, CUADRADO, RECTANGULO, LINEA_OBJ, POLIGONO, ANIMAR,
OBJETO, ANTERIOR, NUMERO;
terminal String ID;
terminal Double SUMA, RESTA, MULTIPLICACION, DIVISION;

/* Non-terminal para las producciones */
non terminal programa, instruccion, animar, forma, color, tipoanimacion, inicial, errorSintactico;
non terminal Double expresion;

/* Precedencia de los operadores */
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;

start with inicial;

inicial ::= programa;

/* Programa con múltiples instrucciones */
programa ::= instruccion programa
           | error:err instruccion {: Lexer.errores.add(new ErrorReporte(String.valueOf(err), 2, 2, "Sintáctico", "Error en el comando")); :}
           | ID:err {: Lexer.errores.add(new ErrorReporte(String.valueOf(err), 1, 1, "Sintáctico", "Se espera \"graficar\" o \"animar\"")); :}
           | /*EOF*/ {: graficar(); :};

/* Instrucciones válidas */
instruccion ::= GRAFICAR forma
              | ANIMAR OBJETO ANTERIOR animar;

/* Formas existentes */
forma ::= CIRCULO PARENTESIS_ABRE ID:id COMA expresion:posicionX COMA expresion:posicionY COMA expresion:radio COMA color:col PARENTESIS_CIERRA {:
    listaObjetosList.add(new Circulo(id, (Double)posicionX, (Double)posicionY, (Double)radio, (String)col)); //graficar();
:}
        | CUADRADO PARENTESIS_ABRE ID:id COMA expresion:posicionX COMA expresion:posicionY COMA expresion:tamanio COMA color:col PARENTESIS_CIERRA {:
    listaObjetosList.add(new Cuadrado(id, (Double)posicionX, (Double)posicionY, (Double)tamanio, (String)col));// graficar();
:}
        | RECTANGULO PARENTESIS_ABRE ID:id COMA expresion:posicionX COMA expresion:posicionY COMA expresion:ancho COMA expresion:alto COMA color:col PARENTESIS_CIERRA {:
    listaObjetosList.add(new Rectangulo(id, (Double)posicionX, (Double)posicionY, (Double)ancho, (Double)alto, (String)col)); //graficar();
:}
        | LINEA_OBJ PARENTESIS_ABRE ID:id COMA expresion:inicialX COMA expresion:inicialY COMA expresion:finalX COMA expresion:finalY COMA color:col PARENTESIS_CIERRA {:
    listaObjetosList.add(new Linea(id, (Double)inicialX, (Double)inicialY, (Double)finalX, (Double)finalY, (String)col)); //graficar();
:}
        | POLIGONO PARENTESIS_ABRE ID:id COMA expresion:posicionX COMA expresion:posicionY COMA expresion:cantLados COMA expresion:ancho COMA expresion:alto COMA color:col PARENTESIS_CIERRA {:
    listaObjetosList.add(new Poligono(id, (Double)posicionX, (Double)posicionY, (Integer)((Double)cantLados).intValue(), (Double)ancho, (Double)alto, (String)col)); //graficar();
:};

/* Colores disponibles */
color ::= AZUL    {: RESULT = "azul"; :}
        | ROJO    {: RESULT = "rojo"; :}
        | AMARILLO {: RESULT = "amarillo"; :}
        | VERDE   {: RESULT = "verde"; :}
        | NEGRO   {: RESULT = "negro"; :}
        | CELESTE {: RESULT = "celeste"; :}
        | ROSADO  {: RESULT = "rosado"; :}
        | MORADO  {: RESULT = "morado"; :};

/* Animación de objeto */
animar ::= PARENTESIS_ABRE tipoanimacion COMA expresion COMA expresion COMA expresion PARENTESIS_CIERRA;

/* Tipos de animación */
tipoanimacion ::= CURVA {: RESULT = "curva"; :}
                | LINEA {: RESULT = "línea"; :};

/* Expresiones aritméticas */
expresion ::= expresion:e1 SUMA expresion:e2                 {: RESULT = ((Number)e1).doubleValue() + ((Number)e2).doubleValue(); :}
             | expresion:e1 RESTA expresion:e2               {: RESULT = ((Number)e1).doubleValue() - ((Number)e2).doubleValue(); :}
             | expresion:e1 MULTIPLICACION expresion:e2      {: RESULT = ((Number)e1).doubleValue() * ((Number)e2).doubleValue(); :}
             | expresion:e1 DIVISION expresion:e2            {: RESULT = ((Number)e1).doubleValue() / ((Number)e2).doubleValue(); :}
             | PARENTESIS_ABRE expresion:e PARENTESIS_CIERRA {: RESULT = ((Number)e).doubleValue(); :}
             | NUMERO:n                                      {: RESULT = ((Number)n).doubleValue(); :};
