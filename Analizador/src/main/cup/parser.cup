package backend.sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.LinkedList;
import frontend.graficas.*;
import backend.figuras.*;
import backend.lexico.Lexer;
import backend.reportes.ErrorReporte;
import javax.swing.JFrame;
import javax.swing.JButton;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Color;

class Parser;

action code {:

    private Figura ultimaFigura = null;
    public List<Figura> listaObjetosList = new LinkedList<>();

    public List<Figura> getListaObjetosList() {
        return listaObjetosList;
    }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            Lexer.errores.add(new ErrorReporte(String.valueOf(s.value), s.left+1, s.right+1, "Sintáctico", message));
            System.out.println("Error sintáctico en la Línea " + (s.left + 1) + " Columna " + (s.right + 1) + ". Se encontró: \"" + s.value + "\". " + message);
        } else {
            System.out.println("Error sintáctico: " + message);
        }
    }

    public void report_fatal_error(String message, Object info) throws Exception {
        report_error(message, info);
        throw new Exception("Error sintáctico irrecuperable.");
    }

    public void graficar() {
        JFrame ventana = new JFrame("Figuras generadas");
        PanelDibujo panelDibujo = new PanelDibujo();

        panelDibujo.setListaFiguras(listaObjetosList);
        ventana.setContentPane(panelDibujo);
        ventana.setSize(800, 600);
        ventana.setLocationRelativeTo(null);

        JButton guardarPNGButton = new JButton("Guardar como PNG");
        guardarPNGButton.addActionListener(e -> panelDibujo.guardarComoPNG());
        JButton guardarPDFButton = new JButton("Guardar como PDF");
        guardarPDFButton.addActionListener(e -> panelDibujo.guardarComoPDF());

        JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.CENTER));
        panelBotones.setBackground(Color.GRAY);
        panelBotones.add(guardarPNGButton);
        panelBotones.add(guardarPDFButton);

        ventana.add(panelBotones, BorderLayout.SOUTH);
        ventana.setVisible(true);
        ventana.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    public void animar(String animacion) {
        if ((listaObjetosList.size() - 1) > 0 ) {
            ultimaFigura = listaObjetosList.get(listaObjetosList.size() - 1);
        }

        if (!listaObjetosList.isEmpty()) {
            String tipoFigura = ultimaFigura.getClass().getSimpleName();
            String tipoAnimacion = animacion.equals("curva") ? "curva" : "línea";
            System.out.println("moviendo " + tipoFigura.toLowerCase() + " en " + tipoAnimacion);
        }

        if (ultimaFigura == null) {
            System.out.println("No hay figura para animar.");
            return;
        }
    }

:}

terminal PARENTESIS_ABRE, PARENTESIS_CIERRA, COMA, AZUL, ROJO, AMARILLO, VERDE,
NEGRO, CELESTE, ROSADO, MORADO, LINEA, CURVA, GRAFICAR, CIRCULO, CUADRADO, RECTANGULO, LINEA_OBJ, POLIGONO, ANIMAR,
OBJETO, ANTERIOR, NUMERO;
terminal String ID;
terminal Double SUMA, RESTA, MULTIPLICACION, DIVISION;

/* Non-terminal para las producciones */
non terminal programa, instruccion, animar, forma, color, tipoanimacion, inicial, errorSintactico;
non terminal Double expresion;

/* Precedencia de los operadores */
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;

start with inicial;

inicial ::= programa;

/* Programa con múltiples instrucciones */
programa ::= instruccion programa
           | error:err {: report_error("Error en el comando", err); :}
           | ID:err {: report_error("Se espera \"graficar\" o \"animar\"", err); :}
           | /*EOF*/ {: graficar(); :};

/* Instrucciones válidas */
instruccion ::= GRAFICAR forma {: ultimaFigura = (Figura) RESULT; :}
              | ANIMAR OBJETO ANTERIOR animar;

/* Formas existentes */
forma ::= CIRCULO PARENTESIS_ABRE ID:id COMA expresion:posicionX COMA expresion:posicionY COMA expresion:radio COMA color:col PARENTESIS_CIERRA {:
    listaObjetosList.add(new Circulo(id, (Double)posicionX, (Double)posicionY, (Double)radio, (String)col));
:}
        | CUADRADO PARENTESIS_ABRE ID:id COMA expresion:posicionX COMA expresion:posicionY COMA expresion:tamanio COMA color:col PARENTESIS_CIERRA {:
    listaObjetosList.add(new Cuadrado(id, (Double)posicionX, (Double)posicionY, (Double)tamanio, (String)col));
:}
        | LINEA_OBJ PARENTESIS_ABRE ID:id COMA expresion:inicialX COMA expresion:inicialY COMA expresion:finalX COMA expresion:finalY COMA color:col PARENTESIS_CIERRA {:
    listaObjetosList.add(new Linea(id, (Double)inicialX, (Double)inicialY, (Double)finalX, (Double)finalY, (String)col));
:}
        | POLIGONO PARENTESIS_ABRE ID:id COMA expresion:posicionX COMA expresion:posicionY COMA expresion:cantLados COMA expresion:ancho COMA expresion:alto COMA color:col PARENTESIS_CIERRA {:
    listaObjetosList.add(new Poligono(id, (Double)posicionX, (Double)posicionY, (Integer)((Double)cantLados).intValue(), (Double)ancho, (Double)alto, (String)col));
:}
        | error:err {: report_error("Error al graficar", err); :};

/* Colores disponibles */
color ::= AZUL    {: RESULT = "azul"; :}
        | ROJO    {: RESULT = "rojo"; :}
        | AMARILLO {: RESULT = "amarillo"; :}
        | VERDE   {: RESULT = "verde"; :}
        | NEGRO   {: RESULT = "negro"; :}
        | CELESTE {: RESULT = "celeste"; :}
        | ROSADO  {: RESULT = "rosado"; :}
        | MORADO  {: RESULT = "morado"; :};

/* Animación de objeto */
animar ::= PARENTESIS_ABRE tipoanimacion:animacion COMA expresion COMA expresion COMA expresion PARENTESIS_CIERRA {: animar(String.valueOf(animacion)); :};

/* Tipos de animación */
tipoanimacion ::= CURVA {: RESULT = "curva"; :}
                | LINEA {: RESULT = "línea"; :}
                | error:err {: report_error("Se esperaba curva o línea", err); :};

/* Expresiones aritméticas */
expresion ::= expresion:e1 SUMA expresion:e2                 {: RESULT = ((Number)e1).doubleValue() + ((Number)e2).doubleValue(); :}
             | expresion:e1 RESTA expresion:e2               {: RESULT = ((Number)e1).doubleValue() - ((Number)e2).doubleValue(); :}
             | expresion:e1 MULTIPLICACION expresion:e2      {: RESULT = ((Number)e1).doubleValue() * ((Number)e2).doubleValue(); :}
             | expresion:e1 DIVISION expresion:e2            {: RESULT = ((Number)e1).doubleValue() / ((Number)e2).doubleValue(); :}
             | PARENTESIS_ABRE expresion:e PARENTESIS_CIERRA {: RESULT = ((Number)e).doubleValue(); :}
             | NUMERO:n                                      {: RESULT = ((Number)n).doubleValue(); :};
